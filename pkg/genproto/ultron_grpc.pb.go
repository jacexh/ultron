// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package genproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UltronAPIClient is the client API for UltronAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UltronAPIClient interface {
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (UltronAPI_SubscribeClient, error)
	Submit(ctx context.Context, in *SubmitRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type ultronAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewUltronAPIClient(cc grpc.ClientConnInterface) UltronAPIClient {
	return &ultronAPIClient{cc}
}

func (c *ultronAPIClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (UltronAPI_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &UltronAPI_ServiceDesc.Streams[0], "/wosai.ultron.UltronAPI/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &ultronAPISubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UltronAPI_SubscribeClient interface {
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type ultronAPISubscribeClient struct {
	grpc.ClientStream
}

func (x *ultronAPISubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ultronAPIClient) Submit(ctx context.Context, in *SubmitRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/wosai.ultron.UltronAPI/Submit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UltronAPIServer is the server API for UltronAPI service.
// All implementations should embed UnimplementedUltronAPIServer
// for forward compatibility
type UltronAPIServer interface {
	Subscribe(*SubscribeRequest, UltronAPI_SubscribeServer) error
	Submit(context.Context, *SubmitRequest) (*emptypb.Empty, error)
}

// UnimplementedUltronAPIServer should be embedded to have forward compatible implementations.
type UnimplementedUltronAPIServer struct {
}

func (UnimplementedUltronAPIServer) Subscribe(*SubscribeRequest, UltronAPI_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedUltronAPIServer) Submit(context.Context, *SubmitRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Submit not implemented")
}

// UnsafeUltronAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UltronAPIServer will
// result in compilation errors.
type UnsafeUltronAPIServer interface {
	mustEmbedUnimplementedUltronAPIServer()
}

func RegisterUltronAPIServer(s grpc.ServiceRegistrar, srv UltronAPIServer) {
	s.RegisterService(&UltronAPI_ServiceDesc, srv)
}

func _UltronAPI_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UltronAPIServer).Subscribe(m, &ultronAPISubscribeServer{stream})
}

type UltronAPI_SubscribeServer interface {
	Send(*SubscribeResponse) error
	grpc.ServerStream
}

type ultronAPISubscribeServer struct {
	grpc.ServerStream
}

func (x *ultronAPISubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _UltronAPI_Submit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UltronAPIServer).Submit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wosai.ultron.UltronAPI/Submit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UltronAPIServer).Submit(ctx, req.(*SubmitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UltronAPI_ServiceDesc is the grpc.ServiceDesc for UltronAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UltronAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wosai.ultron.UltronAPI",
	HandlerType: (*UltronAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Submit",
			Handler:    _UltronAPI_Submit_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _UltronAPI_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ultron.proto",
}
